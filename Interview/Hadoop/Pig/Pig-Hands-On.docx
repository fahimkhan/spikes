## Loading Data in Pig using three different format

A = LOAD 'file.txt';  #Default delimeter is tab

A = LOAD 'file.txt' using PigStorage(',');

A = LOAD 'file.txt' using PigStorage(',') AS (i:chararray,j:charaaray,k:int);


## Transform Data

FILTER

FOREACH

GROUP

JOIN (Inner and Outer)

## Dumping Final Result
 
DUMP A; #To dump data on console

## Store result into file system

STORE A INTO 'output';


############################ Basic Operation #########################
#Data.txt
Fahim 29 5.11
Komal 26 5.7
Khan 30 5.12

#Load
A = LOAD 'Data.txt' using PigStorage(',');

# Store
STORE A INTO 'output_Data';


#########Pig Data Types###########
1. Scalar 
	int
	long
	float
	double
	chararray
	bytearray

2. Complex types
	tuple	# An ordered set of field (19,2)
	Bag		# A collection of tuples {(19,2),(18,1)}
	Map		# A set of key value pair [open#apache]

    # Tuple
    A = LOAD 'Data.txt' AS (T:tuple(f1:chararray,f2:int,f3:float));
    DESCRIBE A;
    A: {T: (f1: chararray,f2: int,f3: float)}
    DUMP A;


    # BAG
    A = LOAD 'Data2.txt' AS (B: bag {T: tuple (f1:int,f2:int,f3:int)});
    DESCRIBE A;
    A: {B: {T: (f1: int,f2: int,f3: int)}}

    #Map
    A = LOAD 'Data3.txt' AS (M: map []);
    DESCRIBE A;
    A: {M: map[]}
    DUMP A;
    ([name#Fahim])
	([age#28])


##############Arithmatic and Boolean Operator####################

#Load Data
A = LOAD 'Data4.txt' AS (f1:int,f2:int,B:bag{T:tuple(t1:int,t2:int)});
DUMP A;

#Modulo operator
X = FOREACH A GENERATE f1,f2,f1%f2;
DUMP X;

#BinCond EXample
X = FOREACH A GENERATE f2 , (f2==1?1:COUNT(B))  ;
DUMP X;


#Boolean Operator
-Filter operator select tuples based on some condition
A = LOAD 'Data5.txt' USING PigStorage(',') AS (f1:int,f2:int,f3:int);

X = FILTER A BY (f1==8) OR (NOT(f2+f3>f1));
DUMP X;

#######################CAST operator########################
A = LOAD 'Data5.txt' USING PigStorage(',') AS (f1:int,f2:int,f3:int);
DUMP A;

B = GROUP A BY f1;
DUMP B;
(1,{(1,2,3)})
(4,{(4,3,3),(4,2,1)})
(7,{(7,2,5)})
(8,{(8,4,3),(8,3,4)})


DESCRIBE B;
B: {group: int,A: {(f1: int,f2: int,f3: int)}}
--Casting
X = FOREACH B GENERATE group,(chararray)COUNT(A) as total;
DUMP X;
DESCRIBE X;
X: {group: int,total: chararray}


--One more example on CASTING bytearray to tuple
A = LOAD 'Data1.txt' AS fld:bytearray;
DESCRIBE A;
A: {fld: bytearray}

X = FOREACH A GENERATE (tuple(int,int,float))fld;
DUMP X;

###########################Comparison Operator#########################
A = LOAD 'Data6.txt' USING PigStorage(',') AS (f1:int,f2:chararray);
DUMP A;

X = FILTER A BY (f1==5);
DUMP X;

X = FILTER A BY (f2=='Hadoop');
DUMP X;

X = FILTER A BY (f2 matches 'Hado');
DUMP X;


################### Relational Operator ####################

#Cartesian Product
A = LOAD 'Data5.txt' USING PigStorage(',') AS (f1:int,f2:int,f3:int);
B = LOAD 'Data6.txt' USING PigStorage(',') AS (p1:int,p2:chararray);

X = CROSS A,B;

#DISTINCT  -- Remove duplicate tuple
A = LOAD 'Data7.txt' USING PigStorage(',') AS (f1:int,f2:int,f3:int);
X = DISTINCT A;

#FILTER - To work with row(tuple) of data 
A = LOAD 'Data6.txt' USING PigStorage(',') AS (f1:int,f2:chararray);
X = FILTER A BY f1==5;

#FOREACH - Work with columns of Data
A = LOAD 'Data5.txt' USING PigStorage(',') AS (f1:int,f2:int,f3:int);
X = FOREACH A GENERATE f1;

Y = FOREACH A GENERATE *;  ---Here Y and A are identical

Z = FOREACH A GENERATE f1,f2;

# Group -- Group data in one or more relation

A = LOAD 'Data8.txt' USING PigStorage(',') AS (name:chararray,age:int,gpa:float);
DUMP A;
B = GROUP A BY age;
DUMP B;
DESCRIBE B;

# JOIN(INNER) -- Based on common column value

A = LOAD 'Data5.txt' USING PigStorage(',') AS (a1:int,a2:int,a3:int);
DUMP A;
B = LOAD 'Data6.txt' USING PigStorage(',') AS (b1:int,b2:chararray);
DUMP B;

X = JOIN A by a1,B by b1;
DUMP X;

# OUTER JOIN

-- LEFT OUTER JOIN
A = LOAD 'Data5.txt' USING PigStorage(',') AS (a1:int,a2:int,a3:int);
B = LOAD 'Data6.txt' USING PigStorage(',') AS (b1:int,b2:chararray);

$0 is first field.Instead of $0 we can use actual field name

X = JOIN A by $0 LEFT OUTER , B BY $0;
DUMP X;

-- RIGHT OUTER JOIN
X = JOIN A by $0 RIGHT OUTER , B BY $0;

-- FULL OUTER JOIN
X = JOIN A by $0 FULL , B BY $0;


# LIMIT -- Limit the number of output tuples
A = LOAD 'Data5.txt' USING PigStorage(',') AS (a1:int,a2:int,a3:int);
X = LIMIT A 3;   -- Random 3 record

# LOAD operator
--default load function is PigStorage  
--default delimeter is tab


# Order BY
--Sort a relattion by one or more field
A = LOAD 'Data5.txt' USING PigStorage(',') AS (a1:int,a2:int,a3:int);
X = ORDER A BY a3 DESC;
DUMP X;

# RANK
--Rank each tuple within a tuple
A = LOAD 'Data9.txt' USING PigStorage(',') AS (a1:chararray,a2:int,a3:chararray);
B = RANK A;

#Split 
---Patition relation into two or more relations
A = LOAD 'Data5.txt' USING PigStorage(',') AS (a1:int,a2:int,a3:int);
 SPLIT A INTO X if a1<7,Y if a2==3,Z if (a3<6 or a3>6);

# STORE
--Store result to file system
A = LOAD 'Data5.txt' USING PigStorage(',') AS (a1:int,a2:int,a3:int);
STORE A INTO 'myOutput' USING PigStorage('*');
cat myoutput; 

#UNION
--Computes union of two or more relation
A = LOAD 'Data5.txt' USING PigStorage(',') AS (a1:int,a2:int,a3:int);
B = LOAD 'Data6.txt' USING PigStorage(',') AS (b1:int,b2:chararray);

X = UNION A,B;
DUMP X;


######################### Pig Streaming with Python ##############################

--Squaring number using python script. Look at square.py

A = LOAD 'Data10.txt';

DUMP A;

DEFINE square `square.py` SHIP('/home/phantom/Downloads/Interview-Question/Hadoop/Pig/square.py');

B = STREAM A THROUGH square;

################# Built in function ##################

###### Eval function
--Evaluate something
# AVG
-- Computes the avg of numeric values in a single column bag
-- Ignore null values

A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

B = GROUP A by name;
DUMP B;

X = FOREACH B GENERATE A.name,AVG(A.gpa);
DUMP X;

# CONCAT
--Concatinate two or more expression of identical type


A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

X = FOREACH A GENERATE CONCAT((chararray)name,CONCAT('_',(chararray)paper));
DUMP X;

# COUNT
--Compute number of element in a bag

A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

B = GORUP A BY name;
DUMP B;

X = FOREACH B GENERATE COUNT(name);
DUMP X; 

# COUNT_STAR
--Compute number of element in a bag
-- It Count the number of null value as well. This is the difference between COUNT and COUNT_STAR

A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

B = GROUP A BY name;
DUMP B;

X = FOREACH B GENERATE COUNT_STAR(name);
DUMP X;

# DIFF
--Compare two fields in tuple

A = LOAD 'Data12.txt' AS (B1:bag{T1:tuple(t1:int,t2:int)},B2:bag{T2:tuple(f1:int,f2:int)});
DUMP A;

X = FOREACH A GENERATE DIFF(B1,B2);
DUMP X;

# MAX
--Computes maximum of numeric values or chararrays in a single column bag
--Ignore null values

A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

B = GROUP A BY name;
DUMP B;

X = FOREACH B GENERATE group,MAX(A.gpa);
DUMP X;

# MIN
--Computes maximum of numeric values or chararrays in a single column bag
--Ignore null values
--Look at data set above
Y = FOREACH B GENERATE group,MIN(A.gpa);
DUMP Y;


# SIZE
--Computes the number of elements based on any Pig data type
A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

X = FOREACH A GENERATE SIZE(name);
DUMP X;

# SUM
-- Computes the sum of numberic value in single column bag
-- Ignore null values

A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

B = GROUP A BY name;
DUMP B;

X = FOREACH B GENERATE group,SUM(A.gpa);
DUMP X;
 
# TOKENIZE
--To split string of words into bag of words
A = LOAD 'Data13.txt' AS (f1:chararray);
DUMP A;

X = FOREACH A GENERATE TOKENIZE(f1);
DUMP X;

############ LOAD and STORE built in function ###########

# BinStorage
--Loads and store data in machine-readable format
-- Supports multiple location like files, directory
-- Does not support compression

A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

STORE A into 'bin_output' USING BinStorage();

X = LOAD 'bin_output' USING BinStorage();
DUMP X;

# Reading JSON Data with JSON Loader
-- Each row in a file has to be JSON dictionary
-- No concept of delimeter

json_data = LOAD 'Data.json' USING JsonLoader('Name:chararray,Age:int,Location:chararray');
DUMP json_data;

# Writing or storing in JSON format using Json Storage 

A = LOAD 'first_table' USING PigStorage() AS (col1:chararray);
DUMP A;

STORE A INTO 'first.json' USING JsonStorage();


# Pig Storage

# TextLoader
-- Work with unstructure data with utf-8 format. Each resulting tuple contains a single field with one line of input text.
-- TextLoader Support compression with limited part
-- TextLoader cannot be used to store data.

A = LOAD 'TextLoader.txt' USING TextLoader();
DUMP A;


#########Tuple and Bag built in function#######

#TOTUPLE
-- Converts one or more expression into type tuple

A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

X = FOREACH A GENERATE TOTUPLE(name,paper,gpa);
DUMP X;

#TOBAG
--Converts one or more expression into type Bag
A = LOAD 'Data11.txt' USING PigStorage(',') AS (name:chararray,paper:chararray,gpa:float);
DUMP A;

X = FOREACH A GENERATE TOBAG(name,paper,gpa);
DUMP X;


################################ Pig Script and UDF #################################

##### Pig Script

--Load Data
student = LOAD 'student_data.csv' USING PigStorage(',') AS(id:int,name:chararray,age:int,gpa:float,country:chararray);

--Group by name
group_student = GROUP student by name;

--calculate max gpa for individual student
max_gpa = FOREACH group_student GENERATE group,MAX(student.gpa);

DUMP max_gpa;


######## UDF ##########
--Support three different languages, JAVA,Python and JavaScript
--There are many UDF written by users and available in community. Piggybank.jar is repository for all such UDF.
-- You can also contribute to piggybank

-- Create new JAVA Project in eclipse and import neccessary library
