1. How to check if Pandas data frame is empty ?

	df.empty

2. What is Pandas ?

	Pandas library that provides easy to use data structures and high performance data analysis tools.

3. Difference between Series and DataFrame ?

	DataFrame : Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns).

	Series : Series is the datastructure for a single column of a DataFrame, not only conceptually, but literally i.e. the data in a DataFrame is actually stored in memory as a collection of Series.

4. Concatenate dataframe in Pandas
	
	frames = [df1, df2, df3]

	result = pd.concat(frames)

	WE can also use 

	result = df1.append(df2)

5. inner Join

	result = pd.concat([df1, df4], axis=1, join='inner')

6. Find which are duplicated 

	df.duplicated()

7. Drop duplicated ?

	df.drop_duplicates()

	df.drop_duplicates(['first_name'], keep='last')

8. Rank in Pandas ?

	df['coverageRanked'] = df['coverage'].rank(ascending=1)

9. ReIndexing

	brushFireRisk = pd.Series([34, 23, 12, 23], index = ['Bisbee', 'Douglas', 'Sierra Vista', 'Tombstone'])
	
	# Reindex the series and create a new series variable
	brushFireRiskReindexed = brushFireRisk.reindex(['Tombstone', 'Douglas', 'Bisbee', 'Sierra Vista', 'Barley', 'Tucson'])

	# Reindex the series and fill in any missing indexes as 0
	brushFireRiskReindexed = brushFireRisk.reindex(['Tombstone', 'Douglas', 'Bisbee', 'Sierra Vista', 'Barley', 'Tucson'], fill_value = 0)

10. Drop a column that contain specific string 

	# Create a variable that drop columns with column names where the first three letters of the column names was 'pre'
	cols = [c for c in df.columns if c.lower()[:3] != 'pre']

	# Create a df of the columns in the variable cols
	df=df[cols]

11. Drop an observation (row)

	df.drop(['Cochice', 'Pima'])

12. Drop a variable (column)

	df.drop('reports', axis=1)

13. Drop a row if it contains a certain value (in this case, "Tina")

	df = df[df.name != 'Tina']

14. Expand Cells Containing Lists Into Their Own Variables In Pandas

	# create a dataset
	raw_data = {'score': [1,2,3], 
        		'tags': [['apple','pear','guava'],['truck','car','plane'],['cat','dog','mouse']]}
	df = pd.DataFrame(raw_data, columns = ['score', 'tags'])

	# expand df.tags into its own dataframe
	tags = df['tags'].apply(pd.Series)

	# rename each variable is tags
	tags = tags.rename(columns = lambda x : 'tag_' + str(x))

	# join the tags dataframe back to the original dataframe
	pd.concat([df[:], tags[:]], axis=1)

15. Convert A String Categorical Variable To A Numeric Variable

	def score_to_numeric(x):
		if x=='strong':
			return 3
    	if x=='normal':
        	return 2
    	if x=='weak':
        	return 1

    df['score_num'] = df['score'].apply(score_to_numeric)

16. Flatten list of list

	# Create a list containing three lists of names
	list_of_lists = [['Amy','Betty','Cathryn','Dana'], 
                 ['Elizabeth','Fay','Gora'], 
                  ['Heidi','Jane','Kayley']]

    # For each element in list_of_lists, take each element in the list
	flattened_list = [i for row in list_of_lists for i in row]

17. Group By function in Pandas
	
	# Group df by df.platoon, then apply a rolling mean lambda function to df.casualties
	df.groupby('Platoon')['Casualties'].apply(lambda x:x.rolling(center=False,window=2).mean())


18. Apply Operations To Groups In Pandas

	# Create a groupby variable that groups preTestScores by regiment
	groupby_regiment = df['preTestScore'].groupby(df['company'])

	list(df['preTestScore'].groupby(df['company']))

	#Descriptive statistics by group
	df['preTestScore'].groupby(df['company']).describe()

	#Mean of each regiment's preTestScore
	groupby_regiment.mean()

	#Mean preTestScores grouped by regiment and company
	df['preTestScore'].groupby([df['regiment'], df['company']]).mean()

	#Mean preTestScores grouped by regiment and company without heirarchical indexing
	df['preTestScore'].groupby([df['regiment'], df['company']]).mean().unstack()

	#Group the entire dataframe by regiment and company
	df.groupby(['regiment', 'company']).mean()

	#Number of observations in each regiment and company
	df.groupby(['regiment', 'company']).size()

	#Iterate an operations over groups
	# Group the dataframe by regiment, and for each regiment,
	for name, group in df.groupby('regiment'): 
    	# print the name of the regiment
    	print(name)
    	# print the data of that regiment
    	print(group)

    #Group by columns
    list(df.groupby(df.dtypes, axis=1))

19. binning in Pandas

	use pd.cut() function

20. Convert to datetime

	df["date"] = pd.to_datetime(df["date"])

21. 