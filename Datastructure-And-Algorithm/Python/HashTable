Many programming languages has Hash table. It has amazing power of fast reading.

Looking up a value in a hash table has an efficiency of O(1) on average, as it takes just one step.

For an unordered array, this would take up to O(N), and for an ordered array, this would take up to O(log N). Using a hash table, however, we can now use the actual menu items as keys, allowing us to do a hash table lookup of O(1). And thatâ€™s the beauty of a hash table.


In hash, trying to add data to a cell that is already filled is known as a collision. Fortunately, there are ways around it. One classic approach for handling collisions is known as separate chaining. When a collision occurs, instead of placing a single value in the cell, it places in it a reference to an array.

In a scenario where the computer hits upon a cell that references an array, its search can take some extra steps, as it needs to conduct a linear search within an array of multiple values. If somehow all of our data ended up within a single cell of our hash table, our hash table would be no better than an array. So it actually turns out that the worst-case performance for a hash table lookup is O(N).