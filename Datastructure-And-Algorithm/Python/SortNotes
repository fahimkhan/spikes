


### Bubble Sort

Pass through each element at a time and compare it with subsequent element then keep pushing element to its logical place till all become in sorted order.

Efficiency : O(N**2)



######Selection Sort

We set things up by inspecting the value at index 0. By definition, it’s the lowest value in the array 
that we’ve encountered so far (as it’s the only value we’ve encountered so far), so we keep track of its index in a variable:
This thing is done till one pass through and then step is repeated.
The selection sort improves on the bubble sort by making only one exchange for every pass through the list.
It has to go through comparison and swap.
For N element : Comparison is N(N-1)/2   and Swap is N-1

Efficiency O(N**2/2)  but in real world divide by 2 is considered as constant.And it will be O(N**2) same as bubble sort.

Offhand, it would seem that this rule would render Big O Notation entirely useless, 
as you can have two algorithms that are described in the same exact way with Big O, and 
yet one can be 100 times faster than the other. And that’s exactly what we’re seeing here with Selection Sort and Bubble Sort. 
Both are described in Big O as O(N2), but Selection Sort is actually twice as fast as Bubble Sort. And indeed, 
if given the choice between these two options, Selection Sort is the better choice. 



####Insert sort

In a first pass through take out the value at index 1 and store it in temp variable and then compare it with the value at left if it is greater than we shift it to the right and decrease the current position by one keep repeating it until we find a value  that is less than temp_value.

There are four types of steps that occur in Insertion Sort: removals, comparisons, shifts, and insertions

Comparison : O(N**2/2)
Shifts : O(N**2/2)
Removal : N-1
Insertion : N-1


Total : N**2 + 2N - 2 
Removing constant so Total : N**2 + N

Big O Notation only takes into account the highest order of N. So again total will change to 
Total : N**2	


At first glance, then, we’d say that Insertion Sort is as slow as Bubble Sort, since it too has N**2 steps. (It’s really N**2 + 2N - 2 steps.)




The Average Case:

Indeed, in a worst-case scenario, Selection Sort is faster than Insertion Sort. However, it is critical that we also take into account the average-case scenario.
